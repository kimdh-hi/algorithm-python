'''

원의 방정식
sqrt( (x1-x2)**2 + (y1-y2)**2 ) = r
= (x1-x2)**2 + (y1-y2)**2 = r**2
= ( (x1-x2)**2 + (y1-y2)**2 ) ** 1/2 = r


d = 두 원의 중심 간 거리
r1, r2 = 각 원의 반지름

1. d > r1+r2 => 떨어져있음
2. d == r1+r2 => 외접
3. d == r1-r2 => 내접
4. d < r1

풀이
0. 한 좌표, 반지름(r1)과 한 좌표, 반지름(r2)이 주어졌을 때 접점의 개수
1. (x1,y1) (x2,y2)를 중심으로 하는 원 사이의 거리 d를 구함
2. 만약 d가 0이라면 두 원은 같은 좌표의 중심을 갖는 것.
    2-1. 같은 중심을 갖을 때, 원이 완전히 겹치는 경우와 겹치지 않는 경우 두 가지
    2-2. 완전히 겹칠 때에는 무한히 많은 접점을 가짐 (=-1)
    2-3. 겹치지 않을 때에 접점은 없음 (=0)
3. d가 0이 아니라면 두 원의 중심좌표는 다른 것이고 떨어져 있음을 의미
4. 총 3가지 경우
    4-1 원이 내접 or 외접하는 경우, 한 개의 접점 (=1)
    4-2 두 개의 접점을 갖는 경우 (=2)
        두 원 사이의 거리(d)가 두 원의 반지름의 합보다 작은 경우
        두 원 사이의 거리(d)가 두 원의 반지름의 차보다 큰 경우
    4-3 그 외 모든 경우는 접점이 없음 (=0)
'''

N = int(input())
for i in range(N):
    x1,y1,r1,x2,y2,r2 = map(int, input().split())
    # (x1,y2)과 (x2,y2)사이의 거리 d
    d = ((x1-x2)**2 + (y1-y2)**2)
    rsum = (r1+r2) **2 # 외접확인
    rsub = (r1-r2) **2 # 내접확인

    # 죄표가 같은 경우
    if d == 0:
        if r1 == r2: # 겹치므로 무한한 점
            print(-1)
        else:
            print(0) # 원이 다른 원을 포함하고 접하지 않은 경우
    # 좌표가 다른 경우
    else:
        if rsum==d or rsub==d: # 내접, 외접 (한 점)
            print(1)
        elif d < rsum and d > rsub: # 두 점이 겹치는 경우
            print(2)
        else:   # 떨어져 있는 경우
            print(0)